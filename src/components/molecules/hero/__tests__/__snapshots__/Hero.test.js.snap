// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Hero component should renders without crash 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Hero
    headline="Work with coffee"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="ui text container"
      >
        <h1
          className="ui header"
        >
          Work with coffee
        </h1>
        <SearchBar
          handleSelect={[Function]}
        />
      </div>,
      "className": "ui vertical center aligned segment hb-hero",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="ui header"
          >
            Work with coffee
          </h1>,
          <SearchBar
            handleSelect={[Function]}
          />,
        ],
        "className": "ui text container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Work with coffee",
            "className": "ui header",
          },
          "ref": null,
          "rendered": "Work with coffee",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "handleSelect": [Function],
            "placeholder": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="ui text container"
        >
          <h1
            className="ui header"
          >
            Work with coffee
          </h1>
          <SearchBar
            handleSelect={[Function]}
          />
        </div>,
        "className": "ui vertical center aligned segment hb-hero",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="ui header"
            >
              Work with coffee
            </h1>,
            <SearchBar
              handleSelect={[Function]}
            />,
          ],
          "className": "ui text container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Work with coffee",
              "className": "ui header",
            },
            "ref": null,
            "rendered": "Work with coffee",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "handleSelect": [Function],
              "placeholder": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
